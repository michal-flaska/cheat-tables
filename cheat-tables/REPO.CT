<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>10</ID>
      <Description>"OUTDATED VERSION"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"ITEMS WONT BREAK"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : REPO
  Version: 
  Date   : 2025-06-24
  Author : shrek

  This script does blah blah blah
}

[ENABLE]

aobscan(INJECT,F3 0F 11 A8 B8 00 00 00 33) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

INJECT:
  jmp newmem
  nop 3
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 11 A8 B8 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 18DDF9E8F78

18DDF9E8F4B: F2 0F 5A E8              - cvtsd2ss xmm5,xmm0
18DDF9E8F4F: F3 0F 11 6D B4           - movss [rbp-4C],xmm5
18DDF9E8F54: 49 8B 47 60              - mov rax,[r15+60]
18DDF9E8F58: 48 8B C8                 - mov rcx,rax
18DDF9E8F5B: F3 0F 10 80 B8 00 00 00  - movss xmm0,[rax+000000B8]
18DDF9E8F63: F3 0F 5A C0              - cvtss2sd xmm0,xmm0
18DDF9E8F67: F3 0F 10 4D A8           - movss xmm1,[rbp-58]
18DDF9E8F6C: F3 0F 5A C9              - cvtss2sd xmm1,xmm1
18DDF9E8F70: F2 0F 5C C1              - subsd xmm0,xmm1
18DDF9E8F74: F2 0F 5A E8              - cvtsd2ss xmm5,xmm0
// ---------- INJECTING HERE ----------
18DDF9E8F78: F3 0F 11 A8 B8 00 00 00  - movss [rax+000000B8],xmm5
// ---------- DONE INJECTING  ----------
18DDF9E8F80: 33 C0                    - xor eax,eax
18DDF9E8F82: 4C 0F B6 F0              - movzx r14,al
18DDF9E8F86: 49 8B 47 60              - mov rax,[r15+60]
18DDF9E8F8A: F3 0F 10 80 B8 00 00 00  - movss xmm0,[rax+000000B8]
18DDF9E8F92: F3 0F 5A C0              - cvtss2sd xmm0,xmm0
18DDF9E8F96: 49 8B 47 60              - mov rax,[r15+60]
18DDF9E8F9A: F3 0F 10 88 B4 00 00 00  - movss xmm1,[rax+000000B4]
18DDF9E8FA2: F3 0F 5A C9              - cvtss2sd xmm1,xmm1
18DDF9E8FA6: F3 0F 10 15 B2 02 00 00  - movss xmm2,[18DDF9E9260]
18DDF9E8FAE: F3 0F 5A D2              - cvtss2sd xmm2,xmm2
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Health does not decrease"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : REPO
  Version: 
  Date   : 2025-06-24
  Author : shrek

  This script does blah blah blah
}

[ENABLE]

aobscan(INJECT,41 89 86 AC 00 00 00 49 63 86 AC 00 00 00 85 C0 7F 2B) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

INJECT:
  jmp newmem
  nop 2
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 41 89 86 AC 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 18C27B34DE6

18C27B34DB6: 7F 35                             - jg 18C27B34DED
18C27B34DB8: B9 01 00 00 00                    - mov ecx,00000001
18C27B34DBD: BA 05 00 00 00                    - mov edx,00000005
18C27B34DC2: 48 8D 6D 00                       - lea rbp,[rbp+00]
18C27B34DC6: 49 BB DD E5 66 6F 8E 01 00 00     - mov r11,0000018E6F66E5DD
18C27B34DD0: 41 FF D3                          - call r11
18C27B34DD3: 41 89 86 AC 00 00 00              - mov [r14+000000AC],eax
18C27B34DDA: EB 11                             - jmp 18C27B34DED
18C27B34DDC: 49 63 86 AC 00 00 00              - movsxd  rax,dword ptr [r14+000000AC]
18C27B34DE3: 41 2B C7                          - sub eax,r15d
// ---------- INJECTING HERE ----------
18C27B34DE6: 41 89 86 AC 00 00 00              - mov [r14+000000AC],eax
// ---------- DONE INJECTING  ----------
18C27B34DED: 49 63 86 AC 00 00 00              - movsxd  rax,dword ptr [r14+000000AC]
18C27B34DF4: 85 C0                             - test eax,eax
18C27B34DF6: 7F 2B                             - jg 18C27B34E23
18C27B34DF8: 49 8B 46 20                       - mov rax,[r14+20]
18C27B34DFC: 48 8B C8                          - mov rcx,rax
18C27B34DFF: 48 63 55 E0                       - movsxd  rdx,dword ptr [rbp-20]
18C27B34E03: 83 38 00                          - cmp dword ptr [rax],00
18C27B34E06: 49 BB 46 FD 6D 6F 8E 01 00 00     - mov r11,0000018E6F6DFD46
18C27B34E10: 41 FF D3                          - call r11
18C27B34E13: 41 C7 86 AC 00 00 00 00 00 00 00  - mov [r14+000000AC],00000000
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Stamina does not decrease"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : REPO
  Version: 
  Date   : 2025-06-24
  Author : shrek

  This script does blah blah blah
}

[ENABLE]

aobscan(INJECT,F3 0F 11 AE 94 01 00 00 48 8B FE) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

INJECT:
  jmp newmem
  nop 3
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 11 AE 94 01 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 18E6F6895D3

18E6F68959A: F2 0F 11 85 E0 F4 FF FF        - movsd [rbp-00000B20],xmm0
18E6F6895A2: 48 8D 6D 00                    - lea rbp,[rbp+00]
18E6F6895A6: 49 BB 30 81 68 6F 8E 01 00 00  - mov r11,0000018E6F688130
18E6F6895B0: 41 FF D3                       - call r11
18E6F6895B3: F3 0F 5A D0                    - cvtss2sd xmm2,xmm0
18E6F6895B7: F2 0F 10 85 F0 F4 FF FF        - movsd xmm0,[rbp-00000B10]
18E6F6895BF: F2 0F 10 8D E0 F4 FF FF        - movsd xmm1,[rbp-00000B20]
18E6F6895C7: F2 0F 59 CA                    - mulsd xmm1,xmm2
18E6F6895CB: F2 0F 5C C1                    - subsd xmm0,xmm1
18E6F6895CF: F2 0F 5A E8                    - cvtsd2ss xmm5,xmm0
// ---------- INJECTING HERE ----------
18E6F6895D3: F3 0F 11 AE 94 01 00 00        - movss [rsi+00000194],xmm5
// ---------- DONE INJECTING  ----------
18E6F6895DB: 48 8B FE                       - mov rdi,rsi
18E6F6895DE: 66 0F 57 C9                    - xorpd xmm1,xmm1
18E6F6895E2: F3 0F 10 86 94 01 00 00        - movss xmm0,[rsi+00000194]
18E6F6895EA: F3 0F 5A C0                    - cvtss2sd xmm0,xmm0
18E6F6895EE: F2 0F 5A E9                    - cvtsd2ss xmm5,xmm1
18E6F6895F2: F3 0F 11 6D C4                 - movss [rbp-3C],xmm5
18E6F6895F7: F2 0F 5A E8                    - cvtsd2ss xmm5,xmm0
18E6F6895FB: F3 0F 11 AD 2C F5 FF FF        - movss [rbp-00000AD4],xmm5
18E6F689603: 66 0F 57 C0                    - xorpd xmm0,xmm0
18E6F689607: F2 0F 5A E8                    - cvtsd2ss xmm5,xmm0
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"OUTDATED VERSION #2"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No stamina drain"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,2918B645FD3) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

2918B645FD3:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
2918B645FD3:
db F3 0F 11 AE A0 01 00 00
//movss [rsi+000001A0],xmm5
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Wont Break"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,290EEFB0410) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

290EEFB0410:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
290EEFB0410:
db F3 0F 11 A8 B8 00 00 00
//movss [rax+000000B8],xmm5
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"God Mode"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,290EF044F86) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

290EF044F86:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
290EF044F86:
db 41 89 86 B4 00 00 00
//mov [r14+000000B4],eax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Turn this on, and put something in the extraction. Trust me"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,2918B687704) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

2918B687704:
jmp newmem
nop 2
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
2918B687704:
db C7 46 64 00 00 00 00
//mov [rsi+64],00000000
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Auto Assemble script"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,250F620CDE0) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

250F620CDE0:
jmp newmem
nop 3
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
250F620CDE0:
db F3 0F 11 A8 B8 00 00 00
//movss [rax+000000B8],xmm5
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of movss [rax+000000B8],xmm5</Description>
      <AddressString>18DDF9E8F78</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>A8</Byte>
        <Byte>B8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>4C</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rsi+00000194],xmm5</Description>
      <AddressString>18E6F6895D3</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>AE</Byte>
        <Byte>94</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>FE</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rsi+000001A0],xmm5</Description>
      <AddressString>2918B645FD3</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>AE</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>FE</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rdi+000001A0],xmm5</Description>
      <AddressString>2918B646097</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>AF</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>86</Byte>
        <Byte>A0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+000001A8],eax</Description>
      <AddressString>2918B67DD72</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>A8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r14+000000B4],eax</Description>
      <AddressString>290EF044F86</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>41</Byte>
        <Byte>2B</Byte>
        <Byte>C7</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>B4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>63</Byte>
        <Byte>86</Byte>
        <Byte>B4</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rsi+00000174],xmm5</Description>
      <AddressString>290EECDF4C7</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>AE</Byte>
        <Byte>74</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>DF</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rsi+0000017C],xmm5</Description>
      <AddressString>290EECDF9D9</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>AE</Byte>
        <Byte>7C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>63</Byte>
        <Byte>86</Byte>
        <Byte>70</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+64],00000000</Description>
      <AddressString>2918B687704</AddressString>
      <Before>
        <Byte>D0</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>45</Byte>
        <Byte>D8</Byte>
      </Before>
      <Actual>
        <Byte>C7</Byte>
        <Byte>46</Byte>
        <Byte>64</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C7</Byte>
        <Byte>46</Byte>
        <Byte>6C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+6C],00000000</Description>
      <AddressString>2918B68770B</AddressString>
      <Before>
        <Byte>64</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C7</Byte>
        <Byte>46</Byte>
        <Byte>6C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>50</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+6C],eax</Description>
      <AddressString>2918B68781C</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>2C</Byte>
        <Byte>C8</Byte>
        <Byte>03</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>BA</Byte>
        <Byte>80</Byte>
        <Byte>A0</Byte>
        <Byte>B2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+00000368],eax</Description>
      <AddressString>290EEF5FBD6</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>6C</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>68</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>B8</Byte>
        <Byte>90</Byte>
        <Byte>CC</Byte>
        <Byte>2D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+0000036C],eax</Description>
      <AddressString>290EEF5FC03</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>6C</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>86</Byte>
        <Byte>60</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+00000368],eax</Description>
      <AddressString>290EEFA136A</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>6C</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>68</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>86</Byte>
        <Byte>64</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov byte ptr [rsi+00000370],01</Description>
      <AddressString>290EEFA1278</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>EB</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>86</Byte>
        <Byte>70</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>86</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rsi+00000190],eax</Description>
      <AddressString>2918B695287</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>94</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>90</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>39</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of lock or al,[rax]</Description>
      <AddressString>29186CF72AC</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F0</Byte>
        <Byte>0A</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>00</Byte>
        <Byte>68</Byte>
        <Byte>25</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rax+000000B8],xmm5</Description>
      <AddressString>290EEFB0410</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>A8</Byte>
        <Byte>B8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>4C</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss xmm0,[rdi+000000B8]</Description>
      <AddressString>2918B6CDC5C</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>56</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>87</Byte>
        <Byte>B8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>C0</Byte>
        <Byte>F2</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
